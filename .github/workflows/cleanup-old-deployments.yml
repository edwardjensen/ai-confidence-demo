name: Cleanup Old Cloudflare Pages Deployments

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode - only list deployments that would be deleted'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      days_threshold:
        description: 'Delete deployments older than X days'
        required: false
        default: '7'
        type: string
  schedule:
    # Run automatically every week on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  cleanup-deployments:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24.x'

    - name: Install Wrangler
      run: npm install -g wrangler

    - name: Set deployment threshold
      id: threshold
      run: |
        # Use input value if provided, otherwise default to 7 days
        DAYS_THRESHOLD="${{ github.event.inputs.days_threshold || '7' }}"
        echo "days_threshold=$DAYS_THRESHOLD" >> $GITHUB_OUTPUT
        
        # Calculate cutoff date (Unix timestamp)
        if [[ "$OSTYPE" == "darwin"* ]]; then
          # macOS date command
          CUTOFF_DATE=$(date -v -${DAYS_THRESHOLD}d +%s)
        else
          # GNU date command (Linux)
          CUTOFF_DATE=$(date -d "$DAYS_THRESHOLD days ago" +%s)
        fi
        echo "cutoff_timestamp=$CUTOFF_DATE" >> $GITHUB_OUTPUT
        echo "üïê Cutoff date: $(date -d @$CUTOFF_DATE 2>/dev/null || date -r $CUTOFF_DATE)"

    - name: List all deployments
      id: list_deployments
      run: |
        echo "üìã Fetching all deployments for project: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}"
        
        # Get deployments using Cloudflare API
        DEPLOYMENTS=$(curl -s -X GET \
          "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/${{ secrets.CLOUDFLARE_PROJECT_NAME }}/deployments" \
          -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
          -H "Content-Type: application/json")
        
        echo "deployments<<EOF" >> $GITHUB_OUTPUT
        echo "$DEPLOYMENTS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Find old deployments
      id: find_old
      run: |
        echo "üîç Finding deployments older than ${{ steps.threshold.outputs.days_threshold }} days..."
        
        # Parse deployments and find old ones
        OLD_DEPLOYMENTS=$(echo '${{ steps.list_deployments.outputs.deployments }}' | jq -r --arg cutoff "${{ steps.threshold.outputs.cutoff_timestamp }}" '
          .result[] | 
          select(.created_on != null) |
          select((now - ((.created_on | fromdateiso8601))) > ($cutoff | tonumber)) |
          select(.latest_stage.name != "active") |
          {id: .id, created_on: .created_on, url: .url, environment: .environment}
        ')
        
        # Count old deployments
        OLD_COUNT=$(echo "$OLD_DEPLOYMENTS" | jq -s 'length')
        echo "old_count=$OLD_COUNT" >> $GITHUB_OUTPUT
        
        echo "old_deployments<<EOF" >> $GITHUB_OUTPUT
        echo "$OLD_DEPLOYMENTS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "üìä Found $OLD_COUNT old deployments to process"

    - name: Display deployments to be deleted (Dry Run)
      if: github.event.inputs.dry_run == 'true' || github.event_name == 'schedule'
      run: |
        echo "üèÉ‚Äç‚ôÇÔ∏è **DRY RUN MODE** - No deployments will be deleted"
        echo ""
        echo "The following ${{ steps.find_old.outputs.old_count }} deployments would be deleted:"
        echo ""
        
        if [ "${{ steps.find_old.outputs.old_count }}" -eq "0" ]; then
          echo "‚úÖ No old deployments found - nothing to clean up!"
        else
          echo '${{ steps.find_old.outputs.old_deployments }}' | jq -r '. | 
            "üóëÔ∏è  ID: " + .id + 
            "\n   üìÖ Created: " + .created_on + 
            "\n   üåê URL: " + (.url // "N/A") + 
            "\n   üè∑Ô∏è  Environment: " + (.environment // "N/A") + 
            "\n"'
        fi
        
        echo ""
        echo "üí° To actually delete these deployments, run this workflow again with dry_run set to 'false'"

    - name: Delete old deployments
      if: github.event.inputs.dry_run == 'false' && steps.find_old.outputs.old_count != '0'
      run: |
        echo "üóëÔ∏è **DELETION MODE** - Deleting ${{ steps.find_old.outputs.old_count }} old deployments..."
        echo ""
        
        DELETED_COUNT=0
        FAILED_COUNT=0
        
        while IFS= read -r deployment; do
          if [ -n "$deployment" ] && [ "$deployment" != "null" ]; then
            DEPLOYMENT_ID=$(echo "$deployment" | jq -r '.id')
            CREATED_ON=$(echo "$deployment" | jq -r '.created_on')
            
            echo "üóëÔ∏è Deleting deployment: $DEPLOYMENT_ID (created: $CREATED_ON)"
            
            DELETE_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X DELETE \
              "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/${{ secrets.CLOUDFLARE_PROJECT_NAME }}/deployments/$DEPLOYMENT_ID" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json")
            
            HTTP_STATUS=$(echo $DELETE_RESPONSE | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
            RESPONSE_BODY=$(echo $DELETE_RESPONSE | sed 's/HTTPSTATUS:[0-9]*$//')
            
            if [ "$HTTP_STATUS" -eq "200" ] || [ "$HTTP_STATUS" -eq "204" ]; then
              echo "   ‚úÖ Successfully deleted"
              ((DELETED_COUNT++))
            else
              echo "   ‚ùå Failed to delete (HTTP $HTTP_STATUS): $RESPONSE_BODY"
              ((FAILED_COUNT++))
            fi
            
            # Add a small delay to avoid rate limiting
            sleep 1
          fi
        done <<< "$(echo '${{ steps.find_old.outputs.old_deployments }}' | jq -c '.')"
        
        echo ""
        echo "üìä **CLEANUP SUMMARY**"
        echo "‚úÖ Successfully deleted: $DELETED_COUNT deployments"
        echo "‚ùå Failed to delete: $FAILED_COUNT deployments"
        
        if [ $FAILED_COUNT -gt 0 ]; then
          echo "‚ö†Ô∏è Some deployments could not be deleted. Check the logs above for details."
          exit 1
        fi

    - name: Summary
      run: |
        echo "üéâ **CLEANUP WORKFLOW COMPLETED**"
        echo ""
        echo "**Configuration:**"
        echo "- Days threshold: ${{ steps.threshold.outputs.days_threshold }} days"
        echo "- Dry run mode: ${{ github.event.inputs.dry_run || 'true (scheduled run)' }}"
        echo "- Deployments found: ${{ steps.find_old.outputs.old_count }}"
        echo ""
        if [ "${{ github.event.inputs.dry_run }}" == "false" ] && [ "${{ steps.find_old.outputs.old_count }}" != "0" ]; then
          echo "‚úÖ Old deployments have been deleted successfully!"
        elif [ "${{ steps.find_old.outputs.old_count }}" == "0" ]; then
          echo "‚ú® No cleanup needed - all deployments are recent!"
        else
          echo "üëÄ Dry run completed - no deployments were deleted"
        fi
