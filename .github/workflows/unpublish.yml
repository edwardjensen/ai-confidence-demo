name: Unpublish from Cloudflare Pages

on:
  schedule:
    # Run daily at 07:00 UTC
    - cron: '0 7 * * *'
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "confirm" to unpublish the site'
        required: true
        type: string

jobs:
  unpublish:
    runs-on: ubuntu-latest
    name: Unpublish AI Confidence Demo

    steps:
      - name: ‚úÖ Validate manual trigger
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "confirm" ]; then
            echo "‚ùå Unpublish operation not confirmed. Please type 'confirm' to proceed."
            exit 1
          fi
          echo "‚úÖ Manual unpublish confirmed"

      - name: üìÅ Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: üóëÔ∏è Delete Cloudflare Pages deployment
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "üóëÔ∏è Deleting all deployments for project: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}"
          
          # Get list of deployments
          DEPLOYMENTS=$(wrangler pages deployment list --project-name=${{ secrets.CLOUDFLARE_PROJECT_NAME }} --format=json | jq -r '.[].id')
          
          if [ -z "$DEPLOYMENTS" ]; then
            echo "‚ÑπÔ∏è No deployments found to delete"
          else
            echo "üîç Found deployments to delete:"
            echo "$DEPLOYMENTS"
            
            # Delete each deployment
            for deployment_id in $DEPLOYMENTS; do
              echo "üóëÔ∏è Deleting deployment: $deployment_id"
              wrangler pages deployment delete $deployment_id --project-name=${{ secrets.CLOUDFLARE_PROJECT_NAME }} --force || echo "‚ö†Ô∏è Failed to delete deployment $deployment_id"
            done
          fi

      - name: üìù Create unpublish summary
        run: |
          echo "## üóëÔ∏è Unpublish Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Unpublished at**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "üï∞Ô∏è **Reason**: Scheduled daily cleanup" >> $GITHUB_STEP_SUMMARY
          else
            echo "üë§ **Reason**: Manual trigger" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Status**: Successfully unpublished from Cloudflare Pages" >> $GITHUB_STEP_SUMMARY

      - name: üìß Notify on scheduled unpublish
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            // Create an issue to notify about the scheduled unpublish
            await github.rest.issues.create({
              owner,
              repo,
              title: `üóëÔ∏è AI Confidence Demo automatically unpublished - ${new Date().toISOString().split('T')[0]}`,
              body: `## Scheduled Unpublish Notification\n\nThe AI Confidence Demo has been automatically unpublished from Cloudflare Pages as part of the daily cleanup schedule.\n\n**Time**: ${new Date().toISOString()}\n**Trigger**: Scheduled cron job (07:00 UTC)\n\n---\n\nTo republish the demo, run the "Deploy to Cloudflare Pages" workflow manually.`,
              labels: ['automated', 'deployment']
            });
